/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/kettleBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

kettleBase::kettleBase() :
    buttonCallback(this, &kettleBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &kettleBase::sliderValueChangedCallbackHandler)
{
    setWidth(480);
    setHeight(272);
    pumpToggle.setXY(115, 176);
    pumpToggle.setBitmaps(touchgfx::Bitmap(BITMAP_WATER_PUMP_OFF_ID), touchgfx::Bitmap(BITMAP_WATER_PUMP_ON_ID));
    pumpToggle.setAction(buttonCallback);

    image1.setXY(192, 73);
    image1.setBitmap(touchgfx::Bitmap(BITMAP_PAN_ID));

    kettleName.setXY(164, 0);
    kettleName.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    kettleName.setLinespacing(0);
    Unicode::snprintf(kettleNameBuffer, KETTLENAME_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
    kettleName.setWildcard(kettleNameBuffer);
    kettleName.resizeToCurrentText();
    kettleName.setTypedText(touchgfx::TypedText(T_SINGLEUSEID1));

    heaterToggle.setXY(304, 146);
    heaterToggle.setBitmaps(touchgfx::Bitmap(BITMAP_HEATER_OFF_ID), touchgfx::Bitmap(BITMAP_HEATER_ON_ID));
    heaterToggle.setAction(buttonCallback);

    sliderTemperature.setXY(435, 76);
    sliderTemperature.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_SLIDER3_VERTICAL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_VERTICAL_SMALL_INDICATORS_SLIDER3_VERTICAL_ROUND_NOB_ID));
    sliderTemperature.setupVerticalSlider(7, 3, 0, 0, 125);
    sliderTemperature.setValueRange(0, 100);
    sliderTemperature.setValue(0);
    sliderTemperature.setNewValueCallback(sliderValueChangedCallback);

    textSetTemp.setXY(101, 111);
    textSetTemp.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    textSetTemp.setLinespacing(0);
    Unicode::snprintf(textSetTempBuffer, TEXTSETTEMP_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID8).getText());
    textSetTemp.setWildcard(textSetTempBuffer);
    textSetTemp.resizeToCurrentText();
    textSetTemp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));

    textAreaSetLabel.setXY(36, 111);
    textAreaSetLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    textAreaSetLabel.setLinespacing(0);
    textAreaSetLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));

    textCurrentTemp.setXY(101, 83);
    textCurrentTemp.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    textCurrentTemp.setLinespacing(0);
    Unicode::snprintf(textCurrentTempBuffer, TEXTCURRENTTEMP_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID11).getText());
    textCurrentTemp.setWildcard(textCurrentTempBuffer);
    textCurrentTemp.resizeToCurrentText();
    textCurrentTemp.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));

    textAreaTempLabel.setXY(15, 83);
    textAreaTempLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    textAreaTempLabel.setLinespacing(0);
    textAreaTempLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));

    timer.setPosition(94, 140, 67, 25);
    timer.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    timer.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));
    timer.displayLeadingZeroForHourIndicator(true);
    timer.setDisplayMode(touchgfx::DigitalClock::DISPLAY_24_HOUR_NO_SECONDS);
    timer.setTime24Hour(0, 0, 0);

    textAreaTimerLabel.setXY(13, 140);
    textAreaTimerLabel.setColor(touchgfx::Color::getColorFrom24BitRGB(196, 196, 196));
    textAreaTimerLabel.setLinespacing(0);
    textAreaTimerLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));

    button1.setXY(118, 8);
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_LEFTARROW_ID), touchgfx::Bitmap(BITMAP_LEFT_ARROW_PRESSED_ID));

    button2.setXY(304, 8);
    button2.setBitmaps(touchgfx::Bitmap(BITMAP_RIGHT_ARROW_ID), touchgfx::Bitmap(BITMAP_RIGHT_ARROW_PRESSED_ID));

    add(pumpToggle);
    add(image1);
    add(kettleName);
    add(heaterToggle);
    add(sliderTemperature);
    add(textSetTemp);
    add(textAreaSetLabel);
    add(textCurrentTemp);
    add(textAreaTempLabel);
    add(timer);
    add(textAreaTimerLabel);
    add(button1);
    add(button2);
}

void kettleBase::initialize()
{

}

void kettleBase::actionHeaterChange(bool value)
{

}

void kettleBase::actionPumpChange(bool value)
{

}

void kettleBase::actionSetTempChange(uint8_t value)
{

}

void kettleBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &pumpToggle)
    {
        //InteractionPump
        //When pumpToggle clicked call actionPumpChange on kettle
        //Call actionPumpChange
        actionPumpChange(pumpToggle.getState());
    }
    else if (&src == &heaterToggle)
    {
        //InteractionHeater
        //When heaterToggle clicked call actionHeaterChange on kettle
        //Call actionHeaterChange
        actionHeaterChange(heaterToggle.getState());
    }
}

void kettleBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderTemperature)
    {
        //InteractionSetTemperature
        //When sliderTemperature value changed call actionSetTempChange on kettle
        //Call actionSetTempChange
        actionSetTempChange(value);
    }
}

